# --------------------- 📦 وارد کردن کتابخانه‌ها ---------------------
import os
import json
import asyncio
import nest_asyncio
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    BotCommand, ReplyKeyboardMarkup, KeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, Application, CommandHandler,
    MessageHandler, CallbackQueryHandler, ContextTypes, filters
)
from TicTacToe import tictactoe, handle_move, handle_new_game

# --------------------- ⚙️ ثابت‌ها ---------------------
ADMIN_ID = 6870943715
DATA_FILE = "bimax.json"
all_users = set()
group_ids = set()
user_states = {}

# --------------------- 💾 ذخیره‌سازی داده‌ها ---------------------
def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump({"users": list(all_users), "groups": list(group_ids)}, f, ensure_ascii=False, indent=2)

def load_data():
    global all_users, group_ids
    if os.path.exists(DATA_FILE) and os.path.getsize(DATA_FILE) > 0:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            all_users = set(data.get("users", []))
            group_ids = set(data.get("groups", []))

# --------------------- 🚀 فرمان /start ---------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        return

    user_id = update.effective_user.id
    all_users.add(user_id)
    save_data()

    keyboard = [[KeyboardButton("✉️ ارسال پیام ناشناس")]]
    if user_id == ADMIN_ID:
        keyboard.append([KeyboardButton("🛠️ حالت ادمین")])

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("سلام! از منوی زیر استفاده کن:", reply_markup=reply_markup)

# --------------------- 💬 مدیریت پیام‌های خصوصی ---------------------
async def handle_private_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or msg.chat.type != "private":
        return

    user_id = msg.from_user.id
    all_users.add(user_id)
    save_data()
    text = msg.text or ""

    # حالت ادمین
    if user_id == ADMIN_ID:
        if text == "🛠️ حالت ادمین":
            admin_kb = [
                [KeyboardButton("👥 تعداد کاربران")],
                [KeyboardButton("👥 گروه‌ها")],
                [KeyboardButton("🔙 بازگشت")]
            ]
            await msg.reply_text("🛠️ حالت مدیریت فعال شد:", reply_markup=ReplyKeyboardMarkup(admin_kb, resize_keyboard=True))
            return

        elif text == "👥 تعداد کاربران":
            await msg.reply_text(f"👥 تعداد کل کاربران: {len(all_users)}")
            return

        elif text == "👥 گروه‌ها":
            if not group_ids:
                await msg.reply_text("هیچ گروهی ثبت نشده.")
                return

            response = "📋 لیست گروه‌ها:\n\n"
            for gid in group_ids:
                try:
                    chat = await context.bot.get_chat(gid)
                    name = chat.title or "بدون عنوان"
                    username = f"@{chat.username}" if chat.username else "⛔ ندارد"
                    response += f"• <b>{name}</b>\n  آیدی عددی: <code>{gid}</code>\n  آیدی عمومی: {username}\n\n"
                except:
                    response += f"• آیدی: <code>{gid}</code> (⛔ دریافت اطلاعات ناموفق)\n\n"

            await msg.reply_text(response, parse_mode="HTML")
            return

        elif text == "🔙 بازگشت":
            await start(update, context)
            return

    # حالت ارسال ناشناس
    if text == "✉️ ارسال پیام ناشناس":
        user_states[user_id] = "awaiting_anonymous_message"
        await msg.reply_text("✍️ لطفاً پیام خود را بنویس یا یک رسانه ارسال کن...")
        return

    # ارسال پیام ناشناس
    if user_states.get(user_id) == "awaiting_anonymous_message":
        await forward_anonymous_to_admin(msg, context)
        user_states[user_id] = None
    if user_id == ADMIN_ID and context.user_data.get("reply_to_user_id"):
        reply_to = context.user_data["reply_to_user_id"]
        try:
            if msg.text:
                await context.bot.send_message(chat_id=reply_to, text=f"📩 پاسخ ادمین:\n\n{msg.text}")
            elif msg.photo:
                await context.bot.send_photo(chat_id=reply_to, photo=msg.photo[-1].file_id, caption="📸 پاسخ ادمین:")
            elif msg.voice:
                await context.bot.send_voice(chat_id=reply_to, voice=msg.voice.file_id, caption="🎙️ پاسخ ادمین:")
            elif msg.video:
                await context.bot.send_video(chat_id=reply_to, video=msg.video.file_id, caption="🎥 پاسخ ادمین:")
            elif msg.audio:
                await context.bot.send_audio(chat_id=reply_to, audio=msg.audio.file_id, caption="🎵 پاسخ ادمین:")
            elif msg.document:
                await context.bot.send_document(chat_id=reply_to, document=msg.document.file_id,
                                                caption="📎 پاسخ ادمین:")
            elif msg.sticker:
                await context.bot.send_sticker(chat_id=reply_to, sticker=msg.sticker.file_id)

            await msg.reply_text("✅ پاسخ ارسال شد.")
        except Exception as e:
            await msg.reply_text(f"❌ خطا در ارسال پاسخ: {e}")
        context.user_data["reply_to_user_id"] = None  # پاک کردن وضعیت
        return
# --------------------- 🔁 فوروارد پیام ناشناس به ادمین + دکمه پاسخ ---------------------
async def forward_anonymous_to_admin(msg, context):
    user = msg.from_user
    user_info = f"<b>👤 From ID:</b> <a href='tg://user?id={user.id}'>{user.id}</a>"
    if user.username:
        user_info += f" | <b>Username:</b> @{user.username}"

    keyboard = InlineKeyboardMarkup([[
        InlineKeyboardButton("✉️ پاسخ دادن", callback_data=f"replyto|{user.id}")
    ]])

    media_sent = False

    try:
        if msg.text:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"{user_info}\n\n📩 پیام ناشناس:\n\n{msg.text}",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            media_sent = True
        elif msg.photo:
            await context.bot.send_photo(
                chat_id=ADMIN_ID,
                photo=msg.photo[-1].file_id,
                caption=f"{user_info}\n📸 عکس ناشناس دریافت شد.",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            media_sent = True
        elif msg.voice:
            await context.bot.send_voice(
                chat_id=ADMIN_ID,
                voice=msg.voice.file_id,
                caption=f"{user_info}\n🎙️ ویس ناشناس دریافت شد.",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            media_sent = True
        elif msg.video:
            await context.bot.send_video(
                chat_id=ADMIN_ID,
                video=msg.video.file_id,
                caption=f"{user_info}\n🎥 ویدیو ناشناس دریافت شد.",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            media_sent = True
        elif msg.audio:
            await context.bot.send_audio(
                chat_id=ADMIN_ID,
                audio=msg.audio.file_id,
                caption=f"{user_info}\n🎵 فایل صوتی ناشناس دریافت شد.",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            media_sent = True
        elif msg.document:
            await context.bot.send_document(
                chat_id=ADMIN_ID,
                document=msg.document.file_id,
                caption=f"{user_info}\n📎 فایل ناشناس دریافت شد.",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            media_sent = True
        elif msg.sticker:
            await context.bot.send_sticker(chat_id=ADMIN_ID, sticker=msg.sticker.file_id, reply_markup=keyboard)
            media_sent = True
    except Exception as e:
        print(f"❌ خطا در ارسال پیام ناشناس: {e}")

    if media_sent:
        await msg.reply_text("✅ پیام شما به ادمین ارسال شد.")
    else:
        await msg.reply_text("❌ این نوع پیام پشتیبانی نمی‌شود.")

# --------------------- 🎮 نمایش منوی بازی ---------------------
async def show_game_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("🎮 بازی دوز", callback_data="menu_tictactoe")]]
    markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text("🌹 یک بازی انتخاب کن:", reply_markup=markup)
    else:
        await update.message.reply_text("🌹 یک بازی انتخاب کن:", reply_markup=markup)

# --------------------- 🎮 مدیریت کلیک روی منوی بازی ---------------------
async def handle_game_menu_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    if data == "menu_tictactoe":
        await tictactoe(update, context)


    elif query.data == "menu_admin":
        admin_kb = [
            [InlineKeyboardButton("👥 تعداد کاربران", callback_data="admin_users")],
            [InlineKeyboardButton("👥 گروه‌ها", callback_data="admin_groups")],
            [InlineKeyboardButton("⬅️ بازگشت", callback_data="menu_back")]
        ]
        await query.edit_message_text("🛠️ منوی مدیریت:", reply_markup=InlineKeyboardMarkup(admin_kb))

    elif query.data == "admin_users":
        await query.edit_message_text(f"👥 تعداد کل کاربران: {len(all_users)}")

    elif query.data == "admin_groups":
        if not group_ids:
            await query.edit_message_text("هیچ گروهی ثبت نشده.")
            return

        lines = []
        for gid in group_ids:
            try:
                chat = await context.bot.get_chat(gid)
                name = chat.title or "نامشخص"
                public = f"@{chat.username}" if chat.username else "⛔ ندارد"
                lines.append(f"• <b>{name}</b>\n  آیدی عددی: <code>{gid}</code>\n  آیدی عمومی: {public}")
            except:
                lines.append(f"• آیدی: <code>{gid}</code> (⛔ خطا در دریافت اطلاعات)")

        await query.edit_message_text("📋 گروه‌های ثبت‌شده:\n\n" + "\n\n".join(lines), parse_mode="HTML")

    elif query.data == "menu_back":
        await show_game_menu(update, context)

# --------------------- 👥 ثبت گروه‌ها ---------------------
async def track_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    group_ids.add(update.effective_chat.id)
    save_data()

# --------------------- ❗ مدیریت خطا ---------------------
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    print(f"❗ Exception: {context.error}")

# --------------------- ⚙️ تعریف فرمان‌های ربات ---------------------
async def set_bot_commands(app: Application):
    await app.bot.set_my_commands([
        BotCommand("play", "🏋️ منوی انتخاب بازی"),
        BotCommand("tictactoe", "🎮 شروع بازی دوز"),
    ])

# --------------------- 📨 ارسال پاسخ ادمین بعد از دکمه ---------------------
async def handle_admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_ID:
        return

    user_id = context.user_data.get("reply_to_user_id")
    if not user_id:
        return

    try:
        if update.message.text:
            await context.bot.send_message(chat_id=user_id, text=f"📩 پاسخ ادمین:\n\n{update.message.text}")
        elif update.message.photo:
            await context.bot.send_photo(chat_id=user_id, photo=update.message.photo[-1].file_id, caption="📸 پاسخ ادمین:")
        elif update.message.voice:
            await context.bot.send_voice(chat_id=user_id, voice=update.message.voice.file_id, caption="🎙️ پاسخ ادمین:")
        elif update.message.video:
            await context.bot.send_video(chat_id=user_id, video=update.message.video.file_id, caption="🎥 پاسخ ادمین:")
        elif update.message.audio:
            await context.bot.send_audio(chat_id=user_id, audio=update.message.audio.file_id, caption="🎵 پاسخ ادمین:")
        elif update.message.document:
            await context.bot.send_document(chat_id=user_id, document=update.message.document.file_id, caption="📎 پاسخ ادمین:")
        elif update.message.sticker:
            await context.bot.send_sticker(chat_id=user_id, sticker=update.message.sticker.file_id)

        await update.message.reply_text("✅ پاسخ ارسال شد.")
        context.user_data["reply_to_user_id"] = None  # پاک کردن آیدی
    except Exception as e:
        await update.message.reply_text(f"❌ خطا در ارسال پاسخ: {e}")

# --------------------- ✉️ مدیریت کلیک دکمه پاسخ دادن از ادمین ---------------------
async def handle_reply_button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.from_user.id != ADMIN_ID:
        return

    try:
        user_id = int(query.data.split("|")[1])
        context.user_data["reply_to_user_id"] = user_id
        await query.message.reply_text("✍️ پیام خود را بنویس تا برای کاربر ناشناس ارسال شود.")
    except:
        await query.message.reply_text("❌ خطا در دریافت آیدی کاربر.")

# --------------------- 🟢 اجرای اصلی ربات ---------------------
async def main():
    load_data()
    app = ApplicationBuilder().token(os.environ["BOT_TOKEN"]).build()

    # فرمان‌ها
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("play", show_game_menu))
    app.add_handler(CommandHandler("tictactoe", tictactoe))

    # پیام‌های خصوصی (همه کاربران، حتی ادمین)
    app.add_handler(MessageHandler(filters.ChatType.PRIVATE, handle_private_message))

    # ثبت گروه‌ها
    app.add_handler(MessageHandler(filters.ChatType.GROUPS, track_group))

    # مدیریت کلیک دکمه‌های اینلاین (ترتیب: خاص → عمومی)
    app.add_handler(CallbackQueryHandler(handle_move, pattern=r"^move\|"))
    app.add_handler(CallbackQueryHandler(handle_reply_button_click, pattern=r"^replyto\|"))
    app.add_handler(CallbackQueryHandler(handle_new_game, pattern="^new_game$"))
    app.add_handler(CallbackQueryHandler(handle_game_menu_click))  # این آخر باشه چون کلیه

    # هندل خطاها
    app.add_error_handler(error_handler)

    # تعریف فرمان‌ها
    await set_bot_commands(app)

    print("\033[32m Bimax is running... ✅ \033[0m")
    await app.run_polling()

# --------------------- ▶️ اجرای برنامه ---------------------
if __name__ == "__main__":
    nest_asyncio.apply()
    asyncio.run(main())
